---
source: colvec-derive/src/lib.rs
expression: formatted
---
pub struct ZSTColVec<A: ::colvec::alloc::Allocator = ::colvec::alloc::Global> {
    buf: ::colvec::raw::RawColVec<0usize, ZST, A>,
    len: usize,
}
impl ZSTColVec<::colvec::alloc::Global> {
    #[inline]
    #[must_use]
    pub const fn new() -> Self {
        Self {
            buf: ::colvec::raw::RawColVec::new(),
            len: 0,
        }
    }
}
impl ::colvec::raw::StructInfo<0usize> for ZST {
    const LAYOUT: ::core::alloc::Layout = unsafe {
        let size = Self::FIELDS.size();
        let align = align_of::<ZST>();
        ::core::alloc::Layout::from_size_align_unchecked(size, align)
    };
    const FIELDS: ::colvec::fields::Fields<0usize> = ::colvec::fields::Fields::from_sizes([]);
}
impl<A: ::colvec::alloc::Allocator> ZSTColVec<A> {
    #[inline]
    pub const fn capacity(&self) -> usize {
        self.buf.capacity()
    }
    #[inline]
    const fn as_ptr(&self) -> *const u8 {
        self.buf.ptr()
    }
    #[inline]
    const fn as_mut_ptr(&mut self) -> *mut u8 {
        self.buf.ptr()
    }
    pub fn push(&mut self, value: ZST) {
        let len = self.len;
        if len == self.buf.capacity() {
            self.buf.grow_one();
        }
        unsafe {}
        self.len = len + 1;
    }
}
impl<A: ::colvec::alloc::Allocator> ZSTColVec<A> {}
